step 1: implement your own image effect/blit render feature, or just import this one https://github.com/Cyanilux/URP_BlitRenderFeature.git

step 2: make sure your render camera and display camera don't use the same renderer, you only want to be adding the image effects to the render camera

step 3: create a new layer named "Display Camera"

step 4: add the "Force Depth Normals" render feature to the render camera renderer, only necessary for the outline

step 5: to use either feature, add a blit render feature and assign the appropriate material

the shaders work perfectly in buil-in as well, just use built in's version of blit which you do through a c# script

Added a 3D LUT based posterization shader and a 3D lut creator. Used the same way as the other one, only difference is you must assign a 3D LUT to the material.

optional: to force point filtering on shadows, copy Universal RP folder from library to packages and in Runtime/ShadowUtils.cs set m_ForceShadowPointSampling to true.

TODO:
    script to pass array into shadows
    implement rest of lit functionality in dithered lit surface
    do something about per object outline, honestly no idea what though
